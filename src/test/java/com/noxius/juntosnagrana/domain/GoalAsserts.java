package com.noxius.juntosnagrana.domain;

import static com.noxius.juntosnagrana.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class GoalAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGoalAllPropertiesEquals(Goal expected, Goal actual) {
        assertGoalAutoGeneratedPropertiesEquals(expected, actual);
        assertGoalAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGoalAllUpdatablePropertiesEquals(Goal expected, Goal actual) {
        assertGoalUpdatableFieldsEquals(expected, actual);
        assertGoalUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGoalAutoGeneratedPropertiesEquals(Goal expected, Goal actual) {
        assertThat(actual)
            .as("Verify Goal auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGoalUpdatableFieldsEquals(Goal expected, Goal actual) {
        assertThat(actual)
            .as("Verify Goal relevant properties")
            .satisfies(a -> assertThat(a.getTitle()).as("check title").isEqualTo(expected.getTitle()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getTargetAmount()).as("check targetAmount").isEqualTo(expected.getTargetAmount()))
            .satisfies(a -> assertThat(a.getCurrentAmount()).as("check currentAmount").isEqualTo(expected.getCurrentAmount()))
            .satisfies(a ->
                assertThat(a.getCreatedAt())
                    .as("check createdAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getCreatedAt())
            )
            .satisfies(a ->
                assertThat(a.getDueDate()).as("check dueDate").usingComparator(zonedDataTimeSameInstant).isEqualTo(expected.getDueDate())
            )
            .satisfies(a -> assertThat(a.getCategory()).as("check category").isEqualTo(expected.getCategory()))
            .satisfies(a -> assertThat(a.getPriority()).as("check priority").isEqualTo(expected.getPriority()))
            .satisfies(a -> assertThat(a.getAlertEnabled()).as("check alertEnabled").isEqualTo(expected.getAlertEnabled()))
            .satisfies(a -> assertThat(a.getAlertThreshold()).as("check alertThreshold").isEqualTo(expected.getAlertThreshold()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGoalUpdatableRelationshipsEquals(Goal expected, Goal actual) {
        assertThat(actual)
            .as("Verify Goal relationships")
            .satisfies(a -> assertThat(a.getFamily()).as("check family").isEqualTo(expected.getFamily()));
    }
}
